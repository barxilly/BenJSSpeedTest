import { useState, useEffect } from "react";
import "./App.css";
import {
  Button,
  Card,
  Center,
  createTheme,
  Flex,
  Grid,
  Image,
  Input,
  Loader,
  MantineProvider,
  Menu,
  Rating,
  Space,
  Stack,
  Text,
  Title,
} from "@mantine/core";
import "@mantine/core/styles.css";
import SpeedTest from "@cloudflare/speedtest";
import { RxCross2 } from "react-icons/rx";
import { PiGameControllerFill } from "react-icons/pi";
import { FaGlobe as FaRedditAlien } from "react-icons/fa";
import { GoDot, GoDotFill } from "react-icons/go";
import { TbTransfer } from "react-icons/tb";
import { BiSolidCoffeeTogo, BiVideo } from "react-icons/bi";
import { FaGun } from "react-icons/fa6";
import { FaInfoCircle } from "react-icons/fa";
import { RiNetflixFill as SiNetflix } from "react-icons/ri";
import { isPWA, isInstallPromptAvailable, showInstallPrompt } from "./pwa";
import { MdExpandMore, MdInstallMobile, MdWeb } from "react-icons/md";
import { BsFillHeartFill } from "react-icons/bs";
import { Capacitor } from "@capacitor/core";
import { GrGroup, GrUpdate } from "react-icons/gr";
import strings from "./strings.json";
import { FastSpeedTest } from "./FastSpeedTest";


// Gaming icon component using xcg.svg
const Gaming = ({
  size = "24px",
  color = "currentColor",
  className = "",
}: {
  size?: string;
  color?: string;
  className?: string;
}) => (
  <svg
    width={size}
    height={size}
    viewBox="0 0 500 500"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    className={className}
    style={{
      verticalAlign: "middle",
    }}
  >
    <path
      d="M199.6,53 C245.835469,53 286.145313,78.15625 307.742656,115.65625 C319.593906,107.6875 333.940156,103 349.3,103 C390.623438,103 424.15,136.59375 424.15,178 C424.15,187.53125 422.356719,196.671875 419.16,205.03125 C464.69375,214.25 499,254.640625 499,303 C499,358.234375 454.323906,403 399.2,403 L112.275,403 C50.2898438,403 0,352.609375 0,290.5 C0,241.4375 31.3434375,199.71875 75.0059375,184.328125 C74.9279687,182.21875 74.85,180.109375 74.85,178 C74.85,108.9375 130.675625,53 199.6,53 Z M250,228.09668 C247.501302,229.791992 245.002604,231.840495 242.503906,234.242188 C240.005208,236.64388 237.638021,238.904297 235.402344,241.023438 C232.772135,243.566406 229.583008,246.815755 225.834961,250.771484 C222.086914,254.727214 218.207357,259.071452 214.196289,263.804199 C210.185221,268.536947 206.141276,273.552246 202.064453,278.850098 C197.98763,284.147949 194.371094,289.410482 191.214844,294.637695 C188.058594,299.864909 185.494141,304.880208 183.521484,309.683594 C181.548828,314.486979 180.5625,318.795898 180.5625,322.610352 C180.5625,324.376302 180.792643,325.965658 181.25293,327.378418 C181.581706,328.791178 182.469401,330.16862 183.916016,331.510742 C185.36263,332.852865 186.907878,334.265625 188.551758,335.749023 C190.195638,337.232422 191.872396,338.539225 193.582031,339.669434 C195.291667,340.799642 196.705404,341.717936 197.823242,342.424316 C205.845378,347.580892 214.229167,351.465983 222.974609,354.07959 C231.720052,356.693197 240.728516,358 250,358 C259.271484,357.929362 268.312826,356.58724 277.124023,353.973633 C285.935221,351.360026 294.286133,347.510254 302.176758,342.424316 C304.675456,340.799642 307.174154,339.06901 309.672852,337.232422 C312.171549,335.395833 314.440104,333.38265 316.478516,331.192871 C317.596354,329.992025 318.352539,328.685221 318.74707,327.272461 C319.141602,325.859701 319.338867,324.340983 319.338867,322.716309 C319.273112,318.689941 318.221029,314.133789 316.182617,309.047852 C314.144206,303.961914 311.382487,298.699382 307.897461,293.260254 C304.412435,287.821126 300.565755,282.34668 296.357422,276.836914 C292.149089,271.327148 287.842122,266.064616 283.436523,261.049316 C279.030924,256.034017 274.855469,251.513184 270.910156,247.486816 C266.964844,243.460449 263.611328,240.140462 260.849609,237.526855 C259.074219,235.902181 257.298828,234.242188 255.523438,232.546875 C253.748047,230.851562 251.906901,229.368164 250,228.09668 Z M182.140625,171.621582 C181.811849,171.69222 181.318685,171.762858 180.661133,171.833496 C180.003581,171.904134 179.510417,172.080729 179.181641,172.363281 C174.315755,177.166667 170.041667,182.570475 166.359375,188.574707 C162.677083,194.578939 159.520833,200.936361 156.890625,207.646973 C154.260417,214.357585 152.28776,221.280111 150.972656,228.414551 C149.657552,235.548991 149,242.577474 149,249.5 C149,261.791016 150.742513,273.375651 154.227539,284.253906 C157.712565,295.132161 162.841471,305.480632 169.614258,315.299316 L170.008789,315.51123 L170.206055,315.405273 L170.304688,315.193359 C169.910156,314.063151 169.647135,312.791667 169.515625,311.378906 C169.384115,309.966146 169.318359,308.659342 169.318359,307.458496 C169.384115,302.513835 170.304688,297.004069 172.080078,290.929199 C173.855469,284.854329 176.222656,278.496908 179.181641,271.856934 C182.140625,265.21696 185.494141,258.541667 189.242188,251.831055 C192.990234,245.120443 196.836914,238.621745 200.782227,232.334961 C204.727539,226.048177 208.574219,220.255859 212.322266,214.958008 C216.070312,209.660156 219.390951,205.139323 222.28418,201.395508 L222.382812,201.077637 L222.28418,200.653809 C220.77181,199.099772 219.095052,197.333822 217.253906,195.355957 C215.41276,193.378092 213.275716,191.294271 210.842773,189.104492 C208.409831,186.914714 205.976888,184.795573 203.543945,182.74707 C201.111003,180.698568 198.612305,178.82666 196.047852,177.131348 C193.483398,175.436035 191.017578,174.093913 188.650391,173.10498 C186.283203,172.116048 184.113281,171.621582 182.140625,171.621582 Z M317.760742,171.621582 C315.722331,171.550944 313.552409,172.080729 311.250977,173.210938 C308.949544,174.341146 306.483724,175.683268 303.853516,177.237305 C301.223307,178.791341 298.691732,180.663249 296.258789,182.853027 C293.825846,185.042806 291.425781,187.197266 289.058594,189.316406 C286.691406,191.435547 284.554362,193.484049 282.647461,195.461914 C280.74056,197.439779 279.09668,199.17041 277.71582,200.653809 L277.617188,200.97168 L277.71582,201.289551 C280.674805,205.104004 284.02832,209.660156 287.776367,214.958008 C291.524414,220.255859 295.371094,226.012858 299.316406,232.229004 C303.261719,238.44515 307.108398,244.943848 310.856445,251.725098 C314.604492,258.506348 317.958008,265.21696 320.916992,271.856934 C323.875977,278.496908 326.243164,284.854329 328.018555,290.929199 C329.793945,297.004069 330.681641,302.478516 330.681641,307.352539 C330.681641,307.705729 330.648763,308.270833 330.583008,309.047852 C330.517253,309.82487 330.451497,310.601888 330.385742,311.378906 C330.319987,312.155924 330.221354,312.897624 330.089844,313.604004 C329.958333,314.310384 329.793945,314.80485 329.59668,315.087402 L329.793945,315.405273 L330.385742,315.299316 C337.158529,305.55127 342.287435,295.202799 345.772461,284.253906 C349.257487,273.305013 351,261.720378 351,249.5 C350.934245,242.36556 350.243815,235.266439 348.928711,228.202637 C347.613607,221.138835 345.673828,214.286947 343.109375,207.646973 C340.544922,201.006999 337.388672,194.720215 333.640625,188.786621 C329.892578,182.853027 325.61849,177.378581 320.818359,172.363281 C320.423828,172.010091 319.930664,171.798177 319.338867,171.727539 C318.74707,171.656901 318.221029,171.621582 317.760742,171.621582 Z M250,141 C240.39974,141.070638 231.259766,142.448079 222.580078,145.132324 C213.900391,147.816569 205.450846,151.807617 197.231445,157.105469 L197.03418,157.42334 L197.03418,157.635254 C197.099935,157.705892 197.264323,157.741211 197.527344,157.741211 C198.447917,157.741211 199.565755,157.599935 200.880859,157.317383 C202.195964,157.034831 203.47819,156.893555 204.727539,156.893555 C208.212565,156.893555 211.927734,157.388021 215.873047,158.376953 C219.818359,159.365885 223.862305,160.63737 228.004883,162.191406 C232.147461,163.745443 236.092773,165.476074 239.84082,167.383301 C243.588867,169.290527 246.876628,171.197754 249.704102,173.10498 L250.197266,173.10498 C251.578125,172.04541 252.991862,171.162435 254.438477,170.456055 C255.885091,169.749674 257.331706,169.007975 258.77832,168.230957 C261.671549,166.818197 264.564779,165.440755 267.458008,164.098633 C270.351237,162.75651 273.375977,161.555664 276.532227,160.496094 C279.688477,159.436523 282.844727,158.588867 286.000977,157.953125 C289.157227,157.317383 292.280599,156.999512 295.371094,156.999512 L297.146484,156.999512 C297.738281,156.999512 298.330078,157.034831 298.921875,157.105469 C299.447917,157.246745 300.006836,157.388021 300.598633,157.529297 C301.19043,157.670573 301.749349,157.741211 302.275391,157.741211 C302.472656,157.741211 302.669922,157.564616 302.867188,157.211426 L302.571289,156.999512 C294.549154,151.70166 286.132487,147.710612 277.321289,145.026367 C268.510091,142.342122 259.402995,141 250,141 Z"
      fill={color}
      fillRule="nonzero"
    />
  </svg>
);

function App() {
  type Language = keyof (typeof strings)["location.unable"];
  const [language, setLanguage] = useState<Language>(
    (localStorage.getItem("language") as Language) || "eng"
  );
  const theme = createTheme({
    fontFamily: '"Rubik", sans-serif',
    headings: { fontFamily: '"M PLUS Rounded 1c", sans-serif' },
    primaryColor: localStorage.getItem("primaryColor") || "blue",
  });
  function frmbts(bps: number, round = false) {
    if (bps === 0) {
      return "0 Kbps";
    } else if (bps < 1000000) {
      const val = bps / 1000;
      return `${round ? Math.round(val) : val.toFixed(2)} Kbps`;
    } else if (bps < 1000000000) {
      const val = bps / 1000000;
      return `${round ? Math.round(val) : val.toFixed(2)} Mbps`;
    } else if (bps < 1000000000000) {
      const val = bps / 1000000000;
      return `${round ? Math.round(val) : val.toFixed(2)} Gbps`;
    } else if (bps >= 100000000000000) {
      const val = bps / 1000000000000;
      return `${round ? Math.round(val) : val.toFixed(2)} Tbps`;
    } else {
      return "0bps";
    }
  }
  function isRunningInCapacitor() {
    return Capacitor.isNativePlatform();
  }
  function calculateDistance(
    lat1: number,
    lon1: number,
    lat2: number,
    lon2: number
  ): number {
    const R = 6371;
    const dLat = ((lat2 - lat1) * Math.PI) / 180;
    const dLon = ((lon2 - lon1) * Math.PI) / 180;
    const a =
      Math.sin(dLat / 2) * Math.sin(dLat / 2) +
      Math.cos((lat1 * Math.PI) / 180) *
        Math.cos((lat2 * Math.PI) / 180) *
        Math.sin(dLon / 2) *
        Math.sin(dLon / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
    const distance = R * c;
    return distance;
  }
  async function findNearestCloudflareServer(
    userLat: number,
    userLon: number
  ): Promise<string> {
    try {
      const response = await fetch("https://speed.cloudflare.com/locations");
      const locations = await response.json();
      let nearestServer = null;
      let shortestDistance = Infinity;
      for (const location of locations) {
        const distance = calculateDistance(
          userLat,
          userLon,
          location.lat,
          location.lon
        );
        if (distance < shortestDistance) {
          shortestDistance = distance;
          nearestServer = location;
        }
      }
      if (nearestServer) {
        const distanceKm = Math.round(shortestDistance);
        const distanceMiles = Math.round(shortestDistance * 0.621371);
        return `${nearestServer.city}, ${nearestServer.cca2} (${distanceKm}km / ${distanceMiles}mi away)`;
      } else {
        return strings["location.unable"][language] || "location.unable";
      }
    } catch (error) {
      console.error("Failed to fetch Cloudflare locations:", error);
      return strings["location.unable"][language] || "location.unable";
    }
  }

  function isDarkMode() {
    return (
      localStorage.getItem("colorScheme") === "dark" ||
      (window.matchMedia &&
        window.matchMedia("(prefers-color-scheme: dark)").matches)
    );
  }

  const [speed, setSpeed] = useState(0);
  const [isTesting, setIsTesting] = useState(false);
  const [nobutt, setNobutt] = useState(false);
  const [down, setDown] = useState(0);
  const [up, setUp] = useState(0);
  const [ping, setPing] = useState(0);
  const [jitter, setJitter] = useState(0);
  const [userLocation, setUserLocation] = useState<string>(
    strings["detecting"][language] || "Detecting..."
  );
  const [nearestCloudflareServer, setNearestCloudflareServer] =
    useState<string>(strings["detecting"][language] || "Detecting...");
  const [ints, setInts] = useState(0);
  console.log(ints);
  const [previousValues, setPreviousValues] = useState({
    down: 0,
    up: 0,
    ping: 0,
  });
  const [unchangedCount, setUnchangedCount] = useState(0);
  const [intervalId, setIntervalId] = useState<ReturnType<
    typeof setInterval
  > | null>(null);
  const [showAdv, setShowAdv] = useState(false);
  const [showUses, setShowUses] = useState(false);
  const [showAllGames, setShowAllGames] = useState(false);
  const [showDebug, setShowDebug] = useState(false);
  const [showInfo, setShowInfo] = useState(false);
  const [showAppUpsell, setShowAppUpsell] = useState(false);
  const [canInstallPWA, setCanInstallPWA] = useState(false);
  const [secTest, setSecTest] = useState(false);
  const [themeRefresh, setThemeRefresh] = useState(0);

  useEffect(() => {
    // Check PWA install availability periodically
    const checkPWAInstall = () => {
      setCanInstallPWA(isInstallPromptAvailable() && !isPWA());
    };

    checkPWAInstall();
    const interval = setInterval(checkPWAInstall, 1000);

    return () => clearInterval(interval);
  }, []);

  // Theme refresh effect - updates every second to keep theming up-to-date
  useEffect(() => {
    const themeUpdateInterval = setInterval(() => {
      setThemeRefresh((prev) => prev + 1);
    }, 500);

    return () => clearInterval(themeUpdateInterval);
  }, []);

  const handlePWAInstall = async () => {
    const installed = await showInstallPrompt();
    if (installed) {
      setCanInstallPWA(false);
    }
  };

  useEffect(() => {
    return () => {
      if (intervalId) {
        clearInterval(intervalId);
      }
    };
  }, [intervalId]);
  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.metaKey && event.key === "g") {
        event.preventDefault();
        setShowDebug((prev) => !prev);
      }
    };
    window.addEventListener("keydown", handleKeyDown);
    return () => window.removeEventListener("keydown", handleKeyDown);
  }, []);
  useEffect(() => {
    const getUserLocation = async () => {
      try {
        let response = await fetch("https://api.ipify.org?format=json");
        const ipData = await response.json();
        response = await fetch(`http://ip-api.com/json/${ipData.ip}`);
        const data = await response.json();
        if (data.status === "success") {
          if (data.city && data.regionName && data.country) {
            setUserLocation(
              `${data.city}, ${data.regionName}, ${data.country}`
            );
          } else if (data.city && data.country) {
            setUserLocation(`${data.city}, ${data.country}`);
          } else {
            setUserLocation("Location unavailable");
          }
          if (data.lat && data.lon) {
            const nearestServer = await findNearestCloudflareServer(
              data.lat,
              data.lon
            );
            setNearestCloudflareServer(nearestServer);
          } else {
            setNearestCloudflareServer("ERR");
          }
        } else {
          throw new Error("Location service failed");
        }
      } catch (error) {
        console.error("Failed to get location:", error);
        if (navigator.geolocation) {
          navigator.geolocation.getCurrentPosition(
            async (position) => {
              const { latitude, longitude } = position.coords;
              setUserLocation("Location detected via GPS");
              const nearestServer = await findNearestCloudflareServer(
                latitude,
                longitude
              );
              setNearestCloudflareServer(nearestServer);
            },
            () => {
              setUserLocation("Location unavailable");
              setNearestCloudflareServer("Unable to determine nearest server");
            }
          );
        } else {
          setUserLocation("Location unavailable");
          setNearestCloudflareServer("Unable to determine nearest server");
        }
      }
    };
    getUserLocation();
  }, []);
  useEffect(() => {
    const fetchData = async () => {
      try {
        let response = await fetch("https://api.ipify.org?format=json");
        const ipData = await response.json();
        response = await fetch(`http://ip-api.com/json/${ipData.ip}`);
        const data = await response.json();
        if (data.status === "success" && data.lat && data.lon) {
          const lat = data.lat;
          const lon = data.lon;
          setNearestCloudflareServer(
            await findNearestCloudflareServer(lat, lon)
          );
        }
      } catch (error) {
        console.error("Failed to fetch location data:", error);
      }
    };
    fetchData();
  }, [userLocation]);
  function isSmolPhone() {
    return (
      window.innerWidth < 550 ||
      window.innerHeight < 550 ||
      /Mobi|Android|iPhone|iPad|iPod|Opera Mini|IEMobile|WPDesktop/i.test(
        navigator.userAgent
      )
    );
  }
  console.log(previousValues);
  console.log(unchangedCount);

  const handleLanguageChange = (newLanguage: Language) => {
    setLanguage(newLanguage);
    localStorage.setItem("language", newLanguage);
  };

  return (
    <div
      style={{
        background: isDarkMode()
          ? "#482f2fff"
          : "linear-gradient(rgba(254, 240, 234, 1), rgb(245, 241, 238))",
        height: "100vh",
        width: "100vw",
        maxHeight: "100vh",
        maxWidth: "100vw",
        overflow: "hidden",
      }}
    >
      {/* Off-screen theme refresh element - updates every second to maintain theming */}
      <div
        style={{
          position: "absolute",
          left: "-9999px",
          top: "-9999px",
          width: "1px",
          height: "1px",
          opacity: 0,
          pointerEvents: "none",
          userSelect: "none",
        }}
        data-theme-refresh={themeRefresh}
      >
        {/* This element forces re-renders to keep theming up-to-date */}
        {isDarkMode() ? "dark" : "light"}-{Date.now()}
      </div>
      <MantineProvider defaultColorScheme="auto" theme={theme}>
        <style>
          {`
        @keyframes becomewhitecircle {
  0% {
  }
  100% {
    width: 204px;
    height: 204px;
    aspect-ratio: 1/1 !important;
    border-radius: 50%;
    opacity: 1;
    user-select: none;
    pointer-events: none;
    color: ${isDarkMode() ? "#fff" : "#000"};
   background: ${isDarkMode() ? "#683747ff" : "#fbf8f5ff"} !important;
  }
}

.boo {
   box-shadow: ${
     isDarkMode()
       ? "0 2px 4px rgba(0, 0, 0, 0.1), 0px 5px 10px -5px rgba(255,255,255,0.4) inset"
       : "0 2px 4px rgba(0, 0, 0, 0.1), 0px 20px 10px -5px rgba(255,255,255,1) inset"
   } !important;
                      background: ${
                        isDarkMode() ? "#683747ff" : "#fbf8f5ff"
                      } !important;
}

@keyframes becomewhitesquircle {
  0% {
  }
  100% {
    width: 70vw;
    height: 40vh;
    border-radius: 20px;
    opacity: 1;
    background-color: ${isDarkMode() ? "#333" : "white"};
  }
}

a {
  color: ${!isDarkMode() ? "#76561a" : "#ad7d7dff"};
  text-decoration: none;
}

@keyframes textpulse {
  0% {
    color: ${isDarkMode() ? "#c0c0c0" : "#808080"};
  }
  50% {
    color: ${isDarkMode() ? "#c0c0c0a0" : "#80808080"};
  }
  100% {
   color: ${isDarkMode() ? "#c0c0c0" : "#808080"};
  }
}

`}
        </style>
        <Center
          style={{
            height:
              window.innerWidth < 520 && isSmolPhone()
                ? "70vh"
                : isSmolPhone()
                ? "85vh"
                : "100vh",
            width: "100vw",
          }}
        >
          <Stack style={{ width: "80vw" }}>
            <Title
              order={1}
              className="title"
              style={{
                textAlign: "center",
                color: isDarkMode() ? "#fff" : "#000",
                display: "",
                fontSize:
                  window.innerWidth < 520 && isSmolPhone() ? "3rem" : "4rem",
              }}
            >
              QwkSpd
            </Title>
            {window.innerWidth < 520 && isSmolPhone() ? (
              <> </>
            ) : (
              <Title
                order={2}
                style={{
                  color: isDarkMode() ? "#fff" : "#000",
                  textAlign: "center",
                  display: "",
                }}
              >
                {strings["desc"][language] || "speedtest.description"}
                <a href="https://cloudflare.com" target="_blank">
                  <img
                    src="/cloudflare.png"
                    alt="Cloudflare"
                    style={{
                      width: "auto",
                      height: "0.6em",
                      marginBottom: "0.07em",
                      filter: isDarkMode() ? "invert(1)" : "none",
                    }}
                  />
                </a>
              </Title>
            )}
            <Space h={window.innerWidth < 520 && isSmolPhone() ? "0" : "md"} />
            <Stack style={{ height: "40vh" }}>
              <Center
                style={{
                  display: speed > 0 ? "" : "none",
                }}
              >
                <Stack>
                  <Center>
                    <Card
                      style={{
                        display: speed > 0 ? "" : "none",
                        width: "204px",
                        height: "204px",
                        position: "relative",
                        userSelect: "none",
                        justifySelf: "center",
                        boxShadow: isDarkMode()
                          ? "0 2px 4px rgba(0, 0, 0, 0.1), 0px 5px 10px -5px rgba(255,255,255,0.4) inset"
                          : "0 2px 4px rgba(0, 0, 0, 0.1), 0px 20px 10px -5px rgba(255,255,255,1) inset",
                        background: isDarkMode() ? "#683747ff" : "#fbf8f5ff",
                        animation: isTesting ? "borderpulse 3s infinite" : "",
                      }}
                      radius="100%"
                      id={speed > 0 && !isTesting ? "dc" : ""}
                      className={speed > 0 && !isTesting ? "dc" : ""}
                      onClick={
                        speed > 0 && !isTesting
                          ? () => {
                              /*document
                            .getElementById("dc")
                            ?.classList.add("becomewhitesquircle");
                            document
                            .getElementById("dc")
                            ?.classList.remove("dc");*/
                              setDown(0);
                              setUp(0);
                              setPing(0);
                              setJitter(0);
                              setSpeed(0);
                              setIsTesting(false);
                              setNobutt(false);
                              setUnchangedCount(0);
                              setPreviousValues({ down: 0, up: 0, ping: 0 });
                              setInts(0);
                              setSecTest(true);
                              document.getElementById("test-button")!.click();
                            }
                          : () => {}
                      }
                    >
                      <Text
                        size="1.4em"
                        style={{
                          position: "absolute",
                          top: "0",
                          left: "50%",
                          transform: "translateX(-50%)",
                          display: up > 0 ? "" : "none",
                          color: isDarkMode()
                            ? isTesting
                              ? "grey"
                              : "white"
                            : isTesting
                            ? "grey"
                            : "black",
                        }}
                        className={isTesting ? "sync-pulse" : ""}
                      >
                        ⇡
                      </Text>
                      <Text
                        size="0.7em"
                        style={{
                          position: "absolute",
                          top: "3em",
                          left: "50%",
                          transform: "translateX(-50%)",
                          display: up > 0 ? "" : "none",
                          color: isDarkMode()
                            ? isTesting
                              ? "grey"
                              : "white"
                            : isTesting
                            ? "grey"
                            : "black",
                        }}
                        className={isTesting ? "sync-pulse" : ""}
                      >
                        {frmbts(up, true)}
                      </Text>{" "}
                      <Title
                        order={1}
                        style={{
                          textAlign: "center",
                          display: speed > 0 ? "block" : "none",
                          color: isDarkMode()
                            ? isTesting
                              ? "grey"
                              : "white"
                            : isTesting
                            ? "grey"
                            : "black",
                          fontSize: "3rem",
                        }}
                        className={isTesting ? "sync-pulse" : ""}
                        id="speed-display"
                      >
                        <Title
                          order={1}
                          style={{
                            textAlign: "center",
                            display: speed > 0 ? "block" : "none",
                            color: isDarkMode()
                              ? isTesting
                                ? "grey"
                                : "white"
                              : isTesting
                              ? "grey"
                              : "black",
                            fontSize: "3rem",
                            width: "100%",
                            paddingTop: "1em",
                            height: "fit-content",
                          }}
                          className={isTesting ? "sync-pulse" : ""}
                          id="speed-display"
                        >
                          {speed > 0
                            ? speed > 1000
                              ? `${speed / 1000}`
                              : speed > 10
                              ? `${Math.round(speed)}`
                              : speed > 1
                              ? `${speed.toFixed(2)}`
                              : `${Math.round(speed * 1000)}`
                            : ""}
                        </Title>
                        <Text style={{ fontSize: "1.2rem" }}>
                          {speed > 1000 ? "Gbps" : speed > 1 ? "Mbps" : "Kbps"}
                        </Text>
                      </Title>
                      <Text
                        size="1.4em"
                        style={{
                          position: "absolute",
                          top: "7.8em",
                          left: "50%",
                          transform: "translateX(-50%)",
                          color: isDarkMode()
                            ? isTesting
                              ? "grey"
                              : "white"
                            : isTesting
                            ? "grey"
                            : "black",
                        }}
                        className={isTesting ? "sync-pulse" : ""}
                      >
                        ⇣
                      </Text>
                      <Stack
                        style={{
                          position: "absolute",
                          top: "14em",
                          left: "2em",
                        }}
                      >
                        <Text>
                          {strings["download.speed"][language] ||
                            "Download Speed"}
                          : {frmbts(down)}
                        </Text>
                        <Text>
                          {strings["upload.speed"][language] || "Upload Speed"}:{" "}
                          {frmbts(up)}
                        </Text>
                        <Text>
                          {strings["ping"][language] || "Ping"}:{" "}
                          {ping.toFixed(2)}ms
                        </Text>
                      </Stack>
                    </Card>
                  </Center>
                  {!isTesting && speed > 0 ? (
                    <>
                      <Space h="sm" />
                      <Center>
                        <Text
                          style={{
                            color: isDarkMode() ? "#ad7d7dff" : "#c1b7aeff",
                            textAlign: "center",
                            fontSize: "0.8em",
                          }}
                        >
                          {strings["click.to.test.again"][language] ||
                            "Click the speed circle to test again"}
                        </Text>
                      </Center>
                    </>
                  ) : (
                    <>
                      <Space h="sm" />
                    </>
                  )}

                  <Card
                    style={{
                      width: "fit-content",
                      boxShadow: isDarkMode()
                        ? "0 2px 4px rgba(0, 0, 0, 0.1), 0px 5px 10px -5px rgba(255,255,255,0.4) inset"
                        : "0 2px 4px rgba(0, 0, 0, 0.1), 0px 20px 10px -5px rgba(255,255,255,1) inset",
                      background: isDarkMode() ? "#683747ff" : "#fbf8f5ff",
                      animation: isTesting ? "borderpulse 3s infinite" : "",
                    }}
                    radius="xl"
                  >
                    <Flex gap="md">
                      <Stack>
                        <Center
                          h={
                            window.innerWidth < 520 && isSmolPhone()
                              ? "2.5em"
                              : "3em"
                          }
                        >
                          <span
                            className={isTesting ? "sync-pulse" : ""}
                            style={{
                              color: isDarkMode()
                                ? isTesting
                                  ? "grey"
                                  : "white"
                                : isTesting
                                ? "grey"
                                : "black",
                            }}
                          >
                            <Gaming
                              size={
                                window.innerWidth < 520 && isSmolPhone()
                                  ? "2.25em"
                                  : "3em"
                              }
                              color="currentColor"
                            />
                          </span>
                        </Center>
                        <Rating
                          emptySymbol={
                            <GoDot
                              size={
                                window.innerWidth < 520 && isSmolPhone()
                                  ? "1em"
                                  : isSmolPhone()
                                  ? "1.2em"
                                  : "1.5em"
                              }
                            />
                          }
                          fullSymbol={
                            <GoDotFill
                              size={
                                window.innerWidth < 520 && isSmolPhone()
                                  ? "1em"
                                  : isSmolPhone()
                                  ? "1.2em"
                                  : "1.5em"
                              }
                            />
                          }
                          color={
                            isDarkMode()
                              ? isTesting
                                ? "grey"
                                : "white"
                              : isTesting
                              ? "grey"
                              : "black"
                          }
                          className={isTesting ? "sync-pulse" : ""}
                          value={
                            speed >= 100
                              ? 5
                              : speed >= 50
                              ? 4
                              : speed >= 20
                              ? 3
                              : speed >= 10
                              ? 2
                              : speed >= 5
                              ? 1
                              : 0
                          }
                          readOnly
                        />
                      </Stack>
                      <Stack>
                        <Center
                          h={
                            window.innerWidth < 520 && isSmolPhone()
                              ? "2.5em"
                              : "3em"
                          }
                        >
                          <SiNetflix
                            size={
                              window.innerWidth < 520 && isSmolPhone()
                                ? "2em"
                                : "2.5em"
                            }
                            color={
                              isDarkMode()
                                ? isTesting
                                  ? "grey"
                                  : "white"
                                : isTesting
                                ? "grey"
                                : "black"
                            }
                            className={isTesting ? "sync-pulse" : ""}
                          />
                        </Center>
                        <Rating
                          emptySymbol={
                            <GoDot
                              size={
                                window.innerWidth < 520 && isSmolPhone()
                                  ? "1em"
                                  : isSmolPhone()
                                  ? "1.2em"
                                  : "1.5em"
                              }
                            />
                          }
                          fullSymbol={
                            <GoDotFill
                              size={
                                window.innerWidth < 520 && isSmolPhone()
                                  ? "1em"
                                  : isSmolPhone()
                                  ? "1.2em"
                                  : "1.5em"
                              }
                            />
                          }
                          color={
                            isDarkMode()
                              ? isTesting
                                ? "grey"
                                : "white"
                              : isTesting
                              ? "grey"
                              : "black"
                          }
                          className={isTesting ? "sync-pulse" : ""}
                          value={
                            speed >= 50
                              ? 5
                              : speed >= 30
                              ? 4
                              : speed >= 10
                              ? 3
                              : speed >= 6
                              ? 2
                              : speed >= 1.5
                              ? 1
                              : 0
                          }
                          readOnly
                        />
                      </Stack>
                      <Stack>
                        <Center
                          h={
                            window.innerWidth < 520 && isSmolPhone()
                              ? "2.5em"
                              : "3em"
                          }
                        >
                          <MdWeb
                            size={
                              window.innerWidth < 520 && isSmolPhone()
                                ? "2em"
                                : "2.5em"
                            }
                            color={
                              isDarkMode()
                                ? isTesting
                                  ? "grey"
                                  : "white"
                                : isTesting
                                ? "grey"
                                : "black"
                            }
                            className={isTesting ? "sync-pulse" : ""}
                          />
                        </Center>
                        <Rating
                          emptySymbol={
                            <GoDot
                              size={
                                window.innerWidth < 520 && isSmolPhone()
                                  ? "1em"
                                  : isSmolPhone()
                                  ? "1.2em"
                                  : "1.5em"
                              }
                            />
                          }
                          fullSymbol={
                            <GoDotFill
                              size={
                                window.innerWidth < 520 && isSmolPhone()
                                  ? "1em"
                                  : isSmolPhone()
                                  ? "1.2em"
                                  : "1.5em"
                              }
                            />
                          }
                          color={
                            isDarkMode()
                              ? isTesting
                                ? "grey"
                                : "white"
                              : isTesting
                              ? "grey"
                              : "black"
                          }
                          className={isTesting ? "sync-pulse" : ""}
                          value={
                            speed >= 30
                              ? 5
                              : speed >= 20
                              ? 4
                              : speed >= 10
                              ? 3
                              : speed >= 7
                              ? 2
                              : speed >= 0.7
                              ? 1
                              : 0
                          }
                          readOnly
                        />
                      </Stack>
                    </Flex>
                    <Center>
                      <MdExpandMore
                        style={{
                          display: speed > 0 && !isTesting ? "" : "none",
                          cursor: "pointer",
                          backgroundColor: "#cccccc44",
                          borderRadius: "50%",
                          padding: "0.3em",
                        }}
                        size="1.7em"
                        onClick={() => setShowUses(true)}
                      />
                    </Center>
                  </Card>
                  <Space h="sm" />
                  <Text
                    style={{
                      color: "#ad7d7dff",
                      textAlign: "center",
                      cursor: "pointer",
                      userSelect: "none",
                      display: !isTesting && speed > 0 ? "" : "none",
                    }}
                    onClick={() => {
                      setShowAdv(true);
                    }}
                  >
                    {strings["advanced.stats"][language] || "Advanced Stats"}
                  </Text>
                </Stack>
              </Center>
              <Center
                style={{
                  display: speed > 0 ? "none" : "",
                  height: "204px",
                }}
              >
                <Button
                  id="test-button"
                  className="boo"
                  onClick={async () => {
                    if (isTesting) return;
                    (
                      document.getElementById("test-button") as HTMLElement
                    )?.classList?.add("shrinkaway");
                    setSpeed(0);
                    setUnchangedCount(0);
                    setPreviousValues({ down: 0, up: 0, ping: 0 });
                    setInts(0);
                    // If URL has ?server=fast than use Fast.com instead
                    if (window.location.search.includes("?server=fast")) {
                      const fastTest = new FastSpeedTest();
                      setIsTesting(true);
                      try {
                        const testResult = await fastTest.runTest();
                        console.log('Fast.com test result:', testResult);
                        setDown(testResult.download);
                        setUp(testResult.upload);
                        setPing(testResult.latency);
                        setJitter(testResult.jitter);
                        setSpeed(Math.round((testResult.download / 1000000) * 1000) / 1000);
                      } catch (error) {
                        console.error('Fast.com test failed:', error);
                      } finally {
                        setIsTesting(false);
                      }
                    } else {
                      const banana = new SpeedTest();
                      banana.onFinish = (results) =>
                        console.log(
                          (results.getSummary().download as number) / 1000000
                        );
                      banana.onRunningChange = (running) => {
                        console.log(`Running: ${running}`);
                        setIsTesting(running);
                        if (!running) {
                          console.log("Test ended, clearing interval");
                          if (intervalId) {
                            clearInterval(intervalId);
                            setIntervalId(null);
                          }
                        }
                      };
                      setIsTesting(await banana.isRunning);
                      let hasTriggeredDisplay = false;
                      const id = setInterval(() => {
                        const newDown = banana.results.getSummary()
                          .download as number;
                        const newUp = banana.results.getSummary()
                          .upload as number;
                        const newPing = banana.results.getSummary()
                          .latency as number;
                        const newJitter = (banana.results.getSummary().jitter as number) || 0;
                        const newSpeedMbps = Math.round((newDown / 1000000) * 1000) / 1000;
                        
                        // Update state values
                        setDown(newDown);
                        setUp(newUp);
                        setPing(newPing);
                        setSpeed(newSpeedMbps);
                        setJitter(newJitter);
                        
                        // Trigger display animation once when we have meaningful data
                        if (!hasTriggeredDisplay && !nobutt && !secTest && newSpeedMbps > 0) {
                          (
                            document.getElementById(
                              "speed-display"
                            ) as HTMLElement
                          )?.classList?.add("growappear");
                          hasTriggeredDisplay = true;
                        }
                        
                        // Set button state when we have data
                        if (newSpeedMbps > 0) {
                          setNobutt(true);
                        }
                        
                        setInts((ints) => {
                          let newInts = ints + 1;
                          console.log(`Interval ${newInts}`);
                          // Test completion: reached max intervals with upload data
                          if (newInts >= 205 && newUp > 0) { // Reduced from 150 for faster completion
                            console.log("Reached max intervals with upload data, stopping test");
                            setIsTesting(false);
                            clearInterval(id);
                            setIntervalId(null);
                          }
                          // Don't reset counter - keep counting total intervals
                          return newInts;
                        });
                        
                        setPreviousValues((prev) => {
                          // Use tolerance for floating point comparison
                          const tolerance = 0.0000001; // 1% tolerance for speed changes
                          const downUnchanged = Math.abs(prev.down - newDown) < (prev.down * tolerance);
                          const upUnchanged = Math.abs(prev.up - newUp) < (prev.up * tolerance);
                          const pingUnchanged = Math.abs(prev.ping - newPing) < 1; // 1ms tolerance
                          
                          if (
                            downUnchanged &&
                            upUnchanged &&
                            pingUnchanged &&
                            newDown > 0 &&
                            newUp > 0 &&
                            newPing > 0
                          ) {
                            setUnchangedCount((count) => {
                              const newCount = count + 1;
                              console.log(`Unchanged count: ${newCount}/75`); // Reduced threshold
                              if (newCount >= 75) { // 800 intervals = 10 seconds of stable results
                                console.log(
                                  "Test completed - values stable for 10 seconds"
                                );
                                setIsTesting(false);
                                clearInterval(id);
                                setIntervalId(null);
                              }
                              return newCount;
                            });
                          } else {
                            setUnchangedCount(0);
                            console.log(
                              "Values changed significantly, resetting stability counter"
                            );
                          }
                          return { down: newDown, up: newUp, ping: newPing };
                        });
                        console.log(banana.results.getSummary());
                        console.log(banana.results);
                      }, 250); // Increased frequency for better responsiveness
                      setIntervalId(id);
                    }
                  }}
                  style={{
                    display: speed > 0 ? "none" : "block",
                    width: "170px",
                    position: "relative",
                    color: isDarkMode() ? "#fff" : "#333",
                  }}
                  fullWidth
                  size="xl"
                  radius="lg"
                >
                  {!isTesting ? strings["start"][language] || "Start" : ""}
                  <Loader
                    color="grey"
                    type="oval"
                    size="lg"
                    style={{
                      display: isTesting ? "block" : "none",
                      animation: isTesting ? "fadein 0.7s linear" : "",
                      position: "absolute",
                      top: "50%",
                      left: "50%",
                      transform: "translateY(-50%) translateX(-50%)",
                      borderRadius: "50%",
                    }}
                  />
                </Button>
              </Center>
            </Stack>
          </Stack>
        </Center>
        {/* Advanced Stats Modal */}
        <Card
          style={{
            position: "absolute",
            top: "5%",
            left: "5%",
            width: "90vw",
            height: "90vh",
            overflowY: "auto",
            display: showAdv ? "block" : "none",
            backgroundColor: isDarkMode() ? "#403437ff" : "white",
            border: isDarkMode() ? "1px solid #421017ff" : "1px solid #e9ecef",
            boxShadow: "0 4px 20px rgba(0, 0, 0, 0.1)",
          }}
          radius="lg"
        >
          <Card
            style={{
              width: "100%",
              height: "100%",
              position: "relative",
              background: "transparent",
              border: "none",
              boxShadow: "none",
              overflowY: "auto",
            }}
          >
            <div
              style={{
                position: "fixed",
                top: "6.5%",
                left: "6.5%",
                cursor: "pointer",
                backgroundColor: isDarkMode() ? "#40292cff" : "#f8f9fa",
                color: isDarkMode() ? "#adb5bd" : "#666",
                borderRadius: "50%",
                width: "40px",
                height: "40px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                fontSize: "1.2em",
                transition: "all 0.2s ease",
                border: isDarkMode()
                  ? "1px solid #421017ff"
                  : "1px solid #e9ecef",
                zIndex: 1000,
              }}
              onClick={() => {
                setShowAdv(false);
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = isDarkMode()
                  ? "#5f383dff"
                  : "#e9ecef";
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = isDarkMode()
                  ? "#40292cff"
                  : "#f8f9fa";
              }}
            >
              <RxCross2 />
            </div>
            <Stack style={{ padding: isSmolPhone() ? "0em" : "2em" }}>
              <Title
                order={1}
                style={{
                  textAlign: "center",
                  marginBottom: "0.5em",
                  fontSize: "2.5rem",
                  fontWeight: 700,
                  color: isDarkMode() ? "#fff" : "#333",
                }}
              >
                {strings["advanced.statistics"][language] ||
                  "Advanced Statistics"}
              </Title>
              <Text
                style={{
                  textAlign: "center",
                  color: isDarkMode() ? "#adb5bd" : "#ad7d7dff",
                  fontSize: "1.1rem",
                  marginBottom: "2em",
                }}
              >
                {strings["detailed.insights"][language] ||
                  "Detailed insights into your network performance"}
              </Text>{" "}
              <Title
                order={3}
                style={{
                  color: isDarkMode() ? "#fff" : "#333",
                  marginBottom: "0.5em",
                  textAlign: "center",
                  fontWeight: 600,
                }}
              >
                {strings["my.speed.seems.off"][language] ||
                  "My Speed Seems Off?"}
              </Title>
              <Text
                style={{
                  textAlign: "center",
                  color: isDarkMode() ? "#adb5bd" : "#666",
                  fontSize: "1rem",
                  marginBottom: "1.5em",
                }}
              >
                {strings["speed.explanation"][language] ||
                  "QwkSpd will likely give different speeds than other tests like Speedtest or Fast. This is because QwkSpd uses Cloudflare's servers rather than dedicated speed test servers. While those other tests are more speed-accurate, this test will be more accurate to IRL usage, as most of the web goes through Cloudflare's servers."}
                <br /> <br />{" "}
                {strings["distance.explanation"][language] ||
                  "Also, see the distance of your nearest Cloudflare server below, as that can affect your speed."}
              </Text>{" "}
              <Stack gap="xl">
                <Card
                  style={{
                    backgroundColor: isDarkMode() ? "#5f383dff" : "white",
                    border: isDarkMode()
                      ? "1px solid #421017ff"
                      : "1px solid #e9ecef",
                    boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                  }}
                  radius="lg"
                  p="xl"
                >
                  <Title
                    order={3}
                    style={{
                      color: isDarkMode() ? "#fff" : "#333",
                      marginBottom: "1.5em",
                      textAlign: "center",
                      fontWeight: 600,
                    }}
                  >
                    Speed Metrics
                  </Title>
                  <Stack gap="lg">
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        padding: "1em 0",
                        borderBottom: "1px solid #f1f3f4",
                      }}
                    >
                      <Text
                        size="lg"
                        style={{
                          color: isDarkMode() ? "#adb5bd" : "#666",
                          fontWeight: 500,
                        }}
                      >
                        {strings["download.speed"][language] ||
                          "Download Speed"}
                      </Text>
                      <div style={{ textAlign: "right" }}>
                        <Text
                          size="xl"
                          fw={600}
                          style={{ color: isDarkMode() ? "#fff" : "#333" }}
                        >
                          {frmbts(down)}
                        </Text>
                        <Text size="sm" style={{ color: "#ad7d7dff" }}>
                          ({(down / 1000).toFixed(2)} Kbps)
                        </Text>
                      </div>
                    </div>
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        padding: "1em 0",
                      }}
                    >
                      <Text
                        size="lg"
                        style={{
                          color: isDarkMode() ? "#adb5bd" : "#666",
                          fontWeight: 500,
                        }}
                      >
                        {strings["upload.speed"][language] || "Upload Speed"}
                      </Text>
                      <div style={{ textAlign: "right" }}>
                        <Text
                          size="xl"
                          fw={600}
                          style={{ color: isDarkMode() ? "#fff" : "#333" }}
                        >
                          {frmbts(up)}
                        </Text>
                        <Text size="sm" style={{ color: "#ad7d7dff" }}>
                          ({(up / 1000).toFixed(2)} Kbps)
                        </Text>
                      </div>
                    </div>
                  </Stack>
                </Card>{" "}
                <Card
                  style={{
                    backgroundColor: isDarkMode() ? "#5f383dff" : "white",
                    border: isDarkMode()
                      ? "1px solid #421017ff"
                      : "1px solid #e9ecef",
                    boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                  }}
                  radius="lg"
                  p="xl"
                >
                  <Title
                    order={3}
                    style={{
                      color: isDarkMode() ? "#fff" : "#333",
                      marginBottom: "1.5em",
                      textAlign: "center",
                      fontWeight: 600,
                    }}
                  >
                    {strings["network.performance"][language] ||
                      "Network Performance"}
                  </Title>
                  <Stack gap="lg">
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        padding: "1em 0",
                        borderBottom: "1px solid #f1f3f4",
                      }}
                    >
                      <Text
                        size="lg"
                        style={{
                          color: isDarkMode() ? "#adb5bd" : "#666",
                          fontWeight: 500,
                        }}
                      >
                        {strings["ping"][language] || "Ping"}
                      </Text>
                      <Text
                        size="xl"
                        fw={600}
                        style={{ color: isDarkMode() ? "#fff" : "#333" }}
                      >
                        {ping.toFixed(2)} ms
                      </Text>
                    </div>
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        padding: "1em 0",
                      }}
                    >
                      <Text
                        size="lg"
                        style={{
                          color: isDarkMode() ? "#adb5bd" : "#666",
                          fontWeight: 500,
                        }}
                      >
                        {strings["jitter"][language] || "Jitter"}
                      </Text>
                      <Text
                        size="xl"
                        fw={600}
                        style={{ color: isDarkMode() ? "#fff" : "#333" }}
                      >
                        {jitter.toFixed(2)} ms
                      </Text>
                    </div>
                  </Stack>
                </Card>{" "}
                <Card
                  style={{
                    backgroundColor: isDarkMode() ? "#5f383dff" : "white",
                    border: isDarkMode()
                      ? "1px solid #421017ff"
                      : "1px solid #e9ecef",
                    boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                  }}
                  radius="lg"
                  p="xl"
                >
                  <Title
                    order={3}
                    style={{
                      color: isDarkMode() ? "#fff" : "#333",
                      marginBottom: "1.5em",
                      textAlign: "center",
                      fontWeight: 600,
                    }}
                  >
                    {strings["location.details"][language] ||
                      "Location Details"}
                  </Title>
                  <Stack gap="lg">
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        padding: "1em 0",
                        borderBottom: "1px solid #f1f3f4",
                      }}
                    >
                      <Text
                        size="lg"
                        style={{
                          color: isDarkMode() ? "#adb5bd" : "#666",
                          fontWeight: 500,
                        }}
                      >
                        {strings["your.location"][language] || "Your Location"}
                      </Text>
                      <Text
                        size="lg"
                        fw={500}
                        style={{
                          color: isDarkMode() ? "#fff" : "#333",
                          textAlign: "right",
                          maxWidth: "60%",
                        }}
                      >
                        {userLocation}
                      </Text>
                    </div>
                    <div
                      style={{
                        display: "flex",
                        justifyContent: "space-between",
                        alignItems: "center",
                        padding: "1em 0",
                      }}
                    >
                      <Text
                        size="lg"
                        style={{
                          color: isDarkMode() ? "#adb5bd" : "#666",
                          fontWeight: 500,
                        }}
                      >
                        {strings["cloudflare.server"][language] ||
                          "Cloudflare Server"}
                      </Text>
                      <Text
                        size="lg"
                        fw={500}
                        style={{
                          color: isDarkMode() ? "#fff" : "#333",
                          textAlign: "right",
                          maxWidth: "60%",
                        }}
                      >
                        {nearestCloudflareServer}
                      </Text>
                    </div>
                  </Stack>
                </Card>
              </Stack>
            </Stack>
          </Card>
        </Card>{" "}
        {/* Uses Stats  */}
        <Card
          style={{
            position: "absolute",
            top: "5%",
            left: "5%",
            width: "90vw",
            height: "90vh",
            overflowY: "auto",
            display: showUses ? "block" : "none",
            backgroundColor: isDarkMode() ? "#403437ff" : "white",
            border: isDarkMode() ? "1px solid #421017ff" : "1px solid #e9ecef",
            boxShadow: "0 4px 20px rgba(0, 0, 0, 0.1)",
          }}
          radius="lg"
        >
          <Card
            style={{
              width: "100%",
              height: "100%",
              position: "relative",
              background: "transparent",
              border: "none",
              boxShadow: "none",
              overflowY: "auto",
            }}
          >
            <div
              style={{
                position: "fixed",
                top: "6.5%",
                left: "6.5%",
                cursor: "pointer",
                backgroundColor: isDarkMode() ? "#40292cff" : "#f8f9fa",
                color: isDarkMode() ? "#adb5bd" : "#666",
                borderRadius: "50%",
                width: "40px",
                height: "40px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                fontSize: "1.2em",
                transition: "all 0.2s ease",
                border: isDarkMode()
                  ? "1px solid #421017ff"
                  : "1px solid #e9ecef",
                zIndex: 1000,
              }}
              onClick={() => {
                setShowUses(false);
              }}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = isDarkMode()
                  ? "#5f383dff"
                  : "#e9ecef";
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = isDarkMode()
                  ? "#40292cff"
                  : "#f8f9fa";
              }}
            >
              <RxCross2 />
            </div>
            <Stack style={{ padding: isSmolPhone() ? "0em" : "1em" }}>
              <Title
                order={1}
                style={{
                  textAlign: "center",
                  marginBottom: "0.5em",
                  fontSize: "2.5rem",
                  fontWeight: 700,
                  color: isDarkMode() ? "#fff" : "#333",
                }}
              >
                {strings["what.can.you.do"][language] || "What Can You Do?"}
              </Title>
              <Text
                style={{
                  textAlign: "center",
                  color: isDarkMode() ? "#adb5bd" : "#ad7d7dff",
                  fontSize: "1.1rem",
                  marginBottom: "2em",
                }}
              >
                {strings["estimated.download.times"][language] ||
                  "Estimated download times for popular content"}
              </Text>{" "}
              <Grid gutter={isSmolPhone() ? "xs" : "xs"}>
                <Grid.Col span={{ base: 12, md: 6 }}>
                  <Card
                    style={{
                      backgroundColor: isDarkMode() ? "#5f383dff" : "white",
                      border: isDarkMode()
                        ? "1px solid #421017ff"
                        : "1px solid #e9ecef",
                      boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                      height: "100%",
                    }}
                    radius="lg"
                    p="xl"
                  >
                    <Title
                      order={3}
                      style={{
                        color: isDarkMode() ? "#fff" : "#333",
                        marginBottom: "1.5em",
                        textAlign: "center",
                        fontWeight: 600,
                      }}
                    >
                      <PiGameControllerFill
                        size="1.2em"
                        style={{
                          marginRight: "0.5em",
                          verticalAlign: "middle",
                        }}
                      />
                      {strings["game.downloads"][language] || "Game Downloads"}
                    </Title>
                    <Stack gap="lg">
                      {[
                        { name: "Starfield", size: 125 },
                        { name: "Baldur's Gate 3", size: 120 },
                        { name: "Red Dead Redemption 2", size: 120 },
                        { name: "Cyberpunk 2077", size: 110 },
                        { name: "GTA V", size: 95 },
                        { name: "Call of Duty: MW3 (2023)", size: 90 },
                        { name: "Diablo 4", size: 85 },
                        { name: "Hogwarts Legacy", size: 80 },
                        { name: "The Witcher 3 (Next Gen)", size: 55 },
                        { name: "Elden Ring", size: 50 },
                        { name: "Fortnite", size: 40 },
                        { name: "CS2", size: 35 },
                        { name: "Valorant", size: 30 },
                        { name: "Minecraft (Java)", size: 1 },
                      ]
                        .slice(0, showAllGames ? undefined : 5)
                        .map((game, index, array) => {
                          const downloadTimeSeconds =
                            (game.size * 8 * 1000000000) / down;
                          const displayTime =
                            downloadTimeSeconds < 60
                              ? `${Math.round(downloadTimeSeconds)} ${
                                  strings["seconds"][language] || "seconds"
                                }`
                              : downloadTimeSeconds < 3600
                              ? `${Math.round(downloadTimeSeconds / 60)} ${
                                  strings["minutes"][language] || "minutes"
                                }`
                              : downloadTimeSeconds < 86400
                              ? `${(downloadTimeSeconds / 3600).toFixed(1)} ${
                                  strings["hours"][language] || "hours"
                                }`
                              : `${(downloadTimeSeconds / 86400).toFixed(1)} ${
                                  strings["days"][language] || "days"
                                }`;
                          return (
                            <div
                              key={index}
                              style={{
                                display: "flex",
                                justifyContent: "space-between",
                                alignItems: "center",
                                padding: "1em 0",
                                borderBottom:
                                  index < array.length - 1
                                    ? "1px solid #f1f3f4"
                                    : "none",
                              }}
                            >
                              <div>
                                <Text
                                  size="lg"
                                  style={{
                                    color: isDarkMode() ? "white" : "#333",
                                    fontWeight: 500,
                                  }}
                                >
                                  {game.name}
                                </Text>
                                <Text size="sm" style={{ color: "#ad7d7dff" }}>
                                  {game.size} GB
                                </Text>
                              </div>
                              <Text
                                size="lg"
                                fw={600}
                                style={{
                                  color: isDarkMode() ? "#ccc" : "#333",
                                }}
                              >
                                {down > 0
                                  ? displayTime
                                  : strings["test.your.speed.first"][
                                      language
                                    ] || "Test your speed first"}
                              </Text>
                            </div>
                          );
                        })}{" "}
                      <Center style={{ paddingTop: "1em" }}>
                        <Button
                          variant="subtle"
                          size="sm"
                          onClick={() => setShowAllGames(!showAllGames)}
                          style={{ color: "#ad7d7dff" }}
                        >
                          {showAllGames
                            ? strings["show.less"][language] || "Show less"
                            : strings["show.more.games"][language] ||
                              "Show more games"}
                        </Button>
                      </Center>
                    </Stack>
                  </Card>
                </Grid.Col>{" "}
                <Grid.Col span={{ base: 12, md: 6 }}>
                  <Card
                    style={{
                      backgroundColor: isDarkMode() ? "#5f383dff" : "white",
                      border: isDarkMode()
                        ? "1px solid #421017ff"
                        : "1px solid #e9ecef",
                      boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                      height: "100%",
                    }}
                    radius="lg"
                    p="xl"
                  >
                    <Title
                      order={3}
                      style={{
                        color: isDarkMode() ? "#fff" : "#333",
                        marginBottom: "1.5em",
                        textAlign: "center",
                        fontWeight: 600,
                      }}
                    >
                      <SiNetflix
                        size="1.2em"
                        style={{
                          marginRight: "0.5em",
                          verticalAlign: "middle",
                        }}
                      />
                      {strings["streaming.performance"][language] ||
                        "Streaming Performance"}
                    </Title>
                    <Stack gap="lg">
                      {[
                        {
                          quality:
                            strings["4k.ultra.hd"][language] || "4K Ultra HD",
                          requirement: 25,
                          description:
                            strings["netflix.prime.desc"][language] ||
                            "Netflix, Prime Video",
                        },
                        {
                          quality: strings["4k.hdr"][language] || "4K HDR",
                          requirement: 50,
                          description:
                            strings["youtube.4k.desc"][language] ||
                            "YouTube 4K videos",
                        },
                        {
                          quality: strings["1080p.hd"][language] || "1080p HD",
                          requirement: 5,
                          description:
                            strings["standard.hd.desc"][language] ||
                            "Standard HD streaming",
                        },
                        {
                          quality: strings["720p.hd"][language] || "720p HD",
                          requirement: 3,
                          description:
                            strings["basic.streaming.desc"][language] ||
                            "Basic quality streaming",
                        },
                        {
                          quality: strings["480p.sd"][language] || "480p SD",
                          requirement: 1.5,
                          description:
                            strings["low.quality.desc"][language] ||
                            "Low quality/mobile",
                        },
                      ].map((stream, index) => {
                        const canStream = down / 1000000 >= stream.requirement;
                        const qualityColor = canStream ? "#28a745" : "#f59e0b";
                        return (
                          <div
                            key={index}
                            style={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                              padding: "1em 0",
                              borderBottom:
                                index < 4 ? "1px solid #f1f3f4" : "none",
                            }}
                          >
                            <div>
                              <Text
                                size="lg"
                                style={{
                                  color: isDarkMode() ? "#fff" : "#333",
                                  fontWeight: 500,
                                }}
                              >
                                {stream.quality}
                              </Text>
                              <Text size="sm" style={{ color: "#ad7d7dff" }}>
                                {stream.description}
                              </Text>
                            </div>
                            <div style={{ textAlign: "right" }}>
                              <Text
                                size="lg"
                                fw={600}
                                style={{ color: qualityColor }}
                              >
                                {canStream
                                  ? strings["smooth"][language] || "✓ Smooth"
                                  : strings["may.buffer"][language] ||
                                    "⚠ May buffer"}
                              </Text>
                              <Text size="sm" style={{ color: "#ad7d7dff" }}>
                                {strings["optimal"][language] || "Optimal"}:{" "}
                                {stream.requirement} Mbps
                              </Text>
                            </div>
                          </div>
                        );
                      })}
                    </Stack>
                  </Card>
                </Grid.Col>{" "}
                <Grid.Col span={{ base: 12, md: 6 }}>
                  <Card
                    style={{
                      backgroundColor: isDarkMode() ? "#5f383dff" : "white",
                      border: isDarkMode()
                        ? "1px solid #421017ff"
                        : "1px solid #e9ecef",
                      boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                      height: "100%",
                    }}
                    radius="lg"
                    p="xl"
                  >
                    <Title
                      order={3}
                      style={{
                        color: isDarkMode() ? "#fff" : "#333",
                        marginBottom: "1.5em",
                        textAlign: "center",
                        fontWeight: 600,
                      }}
                    >
                      <FaRedditAlien
                        size="1.2em"
                        style={{
                          marginRight: "0.5em",
                          verticalAlign: "middle",
                        }}
                      />
                      {strings["social.media.browsing"][language] ||
                        "Social Media Browsing"}
                    </Title>
                    <Text
                      style={{
                        textAlign: "center",
                        color: isDarkMode() ? "#adb5bd" : "#ad7d7dff",
                        fontSize: "0.9rem",
                        marginBottom: "1em",
                      }}
                    >
                      {strings["download.speed.dependency"][language] ||
                        "These activities primarily depend on your download speed"}
                    </Text>
                    <Stack gap="lg">
                      {[
                        {
                          activity:
                            strings["4k.video.streaming"][language] ||
                            "4K Video Streaming",
                          requirement: 25,
                          description:
                            strings["youtube.tiktok.reels.desc"][language] ||
                            "YouTube, TikTok, Instagram Reels",
                        },
                        {
                          activity:
                            strings["1080p.video.streaming"][language] ||
                            "1080p Video Streaming",
                          requirement: 5,
                          description:
                            strings["social.media.videos.desc"][language] ||
                            "Social media videos",
                        },
                        {
                          activity: "Image-Heavy Browsing",
                          requirement: 3,
                          description:
                            strings["instagram.pinterest.desc"][language] ||
                            "Instagram, Pinterest feeds",
                        },
                        {
                          activity: "Social Media Browsing",
                          requirement: 1,
                          description:
                            strings["twitter.facebook.reddit.desc"][language] ||
                            "Twitter, Facebook, Reddit",
                        },
                        {
                          activity: "Web Browsing",
                          requirement: 0.5,
                          description:
                            strings["general.internet.desc"][language] ||
                            "General internet use",
                        },
                      ].map((activity, index) => {
                        const canDo = down / 1000000 >= activity.requirement;
                        const statusColor = canDo ? "#28a745" : "#f59e0b";
                        return (
                          <div
                            key={index}
                            style={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                              padding: "1em 0",
                              borderBottom:
                                index < 4 ? "1px solid #f1f3f4" : "none",
                            }}
                          >
                            <div>
                              <Text
                                size="lg"
                                style={{
                                  color: isDarkMode() ? "#fff" : "#333",
                                  fontWeight: 500,
                                }}
                              >
                                {activity.activity}
                              </Text>
                              <Text size="sm" style={{ color: "#ad7d7dff" }}>
                                {activity.description}
                              </Text>
                            </div>
                            <div style={{ textAlign: "right" }}>
                              <Text
                                size="lg"
                                fw={600}
                                style={{ color: statusColor }}
                              >
                                {canDo
                                  ? strings["smooth"][language] || "✓ Smooth"
                                  : strings["may.buffer"][language] ||
                                    "⚠ May buffer"}
                              </Text>
                              <Text size="sm" style={{ color: "#ad7d7dff" }}>
                                {strings["optimal"][language] || "Optimal"}:{" "}
                                {activity.requirement} Mbps
                              </Text>
                            </div>
                          </div>
                        );
                      })}
                    </Stack>
                  </Card>
                </Grid.Col>{" "}
                <Grid.Col span={{ base: 12, md: 6 }}>
                  <Card
                    style={{
                      backgroundColor: isDarkMode() ? "#5f383dff" : "white",
                      border: isDarkMode()
                        ? "1px solid #421017ff"
                        : "1px solid #e9ecef",
                      boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                      height: "100%",
                    }}
                    radius="lg"
                    p="xl"
                  >
                    <Title
                      order={3}
                      style={{
                        color: isDarkMode() ? "#fff" : "#333",
                        marginBottom: "1.5em",
                        textAlign: "center",
                        fontWeight: 600,
                      }}
                    >
                      <BiVideo
                        size="1.2em"
                        style={{
                          marginRight: "0.5em",
                          verticalAlign: "middle",
                        }}
                      />
                      {strings["content.creation.upload"][language] ||
                        "Content Creation & Upload"}
                    </Title>
                    <Text
                      style={{
                        textAlign: "center",
                        color: isDarkMode() ? "#adb5bd" : "#ad7d7dff",
                        fontSize: "0.9rem",
                        marginBottom: "1em",
                      }}
                    >
                      {strings["upload.speed.dependency"][language] ||
                        "These activities primarily depend on your upload speed"}
                    </Text>
                    <Stack gap="lg">
                      {[
                        {
                          activity:
                            strings["4k.video.upload"][language] ||
                            "4K Video Upload",
                          requirement: 40,
                          description:
                            strings["youtube.tiktok.creation.desc"][language] ||
                            "YouTube, TikTok content creation",
                        },
                        {
                          activity:
                            strings["1080p.video.upload"][language] ||
                            "1080p Video Upload",
                          requirement: 10,
                          description:
                            strings["instagram.facebook.videos.desc"][
                              language
                            ] || "Instagram, Facebook videos",
                        },
                        {
                          activity:
                            strings["hd.video.calls"][language] ||
                            "HD Video Calls",
                          requirement: 2,
                          description:
                            strings["zoom.teams.discord.desc"][language] ||
                            "Zoom, Teams, Discord",
                        },
                        {
                          activity:
                            strings["photo.upload"][language] || "Photo Upload",
                          requirement: 1,
                          description:
                            strings["instagram.cloud.backup.desc"][language] ||
                            "Instagram posts, cloud backup",
                        },
                        {
                          activity:
                            strings["live.streaming"][language] ||
                            "Live Streaming",
                          requirement: 5,
                          description:
                            strings["twitch.youtube.live.desc"][language] ||
                            "Twitch, YouTube Live",
                        },
                      ].map((activity, index) => {
                        const canDo = up / 1000000 >= activity.requirement;
                        const statusColor = canDo ? "#28a745" : "#f59e0b";
                        return (
                          <div
                            key={index}
                            style={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                              padding: "1em 0",
                              borderBottom:
                                index < 4 ? "1px solid #f1f3f4" : "none",
                            }}
                          >
                            <div>
                              <Text
                                size="lg"
                                style={{
                                  color: isDarkMode() ? "#fff" : "#333",
                                  fontWeight: 500,
                                }}
                              >
                                {activity.activity}
                              </Text>
                              <Text size="sm" style={{ color: "#ad7d7dff" }}>
                                {activity.description}
                              </Text>
                            </div>
                            <div style={{ textAlign: "right" }}>
                              <Text
                                size="lg"
                                fw={600}
                                style={{ color: statusColor }}
                              >
                                {canDo
                                  ? strings["smooth"][language] || "✓ Smooth"
                                  : strings["may.lag"][language] || "⚠ May lag"}
                              </Text>
                              <Text size="sm" style={{ color: "#ad7d7dff" }}>
                                {strings["optimal"][language] || "Optimal"}:{" "}
                                {activity.requirement} Mbps{" "}
                                {strings["upload.suffix"][language] || "upload"}
                              </Text>
                            </div>
                          </div>
                        );
                      })}
                    </Stack>
                  </Card>
                </Grid.Col>{" "}
                <Grid.Col span={{ base: 12, md: 6 }}>
                  <Card
                    style={{
                      backgroundColor: isDarkMode() ? "#5f383dff" : "white",
                      border: isDarkMode()
                        ? "1px solid #421017ff"
                        : "1px solid #e9ecef",
                      boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                      height: "100%",
                    }}
                    radius="lg"
                    p="xl"
                  >
                    <Title
                      order={3}
                      style={{
                        color: isDarkMode() ? "#fff" : "#333",
                        marginBottom: "1.5em",
                        textAlign: "center",
                        fontWeight: 600,
                      }}
                    >
                      <TbTransfer
                        size="1.2em"
                        style={{
                          marginRight: "0.5em",
                          verticalAlign: "middle",
                        }}
                      />
                      {strings["file.transfer.times"][language] ||
                        "File Transfer Times"}
                    </Title>
                    <Stack gap="lg">
                      {[
                        {
                          name:
                            strings["4k.movie"][language] || "4K Movie (25 GB)",
                          size: 25,
                        },
                        {
                          name:
                            strings["hd.movie"][language] || "HD Movie (8 GB)",
                          size: 8,
                        },
                        {
                          name:
                            strings["music.album"][language] ||
                            "Music Album (100 MB)",
                          size: 0.1,
                        },
                        {
                          name:
                            strings["high.res.photo"][language] ||
                            "High-res Photo (10 MB)",
                          size: 0.01,
                        },
                        {
                          name:
                            strings["document"][language] || "Document (1 MB)",
                          size: 0.001,
                        },
                      ].map((file, index) => {
                        const downloadTimeSeconds =
                          (file.size * 8 * 1000000000) / down;
                        const displayTime =
                          downloadTimeSeconds < 60
                            ? `${Math.round(downloadTimeSeconds)} ${
                                strings["seconds"][language] || "seconds"
                              }`
                            : downloadTimeSeconds < 3600
                            ? `${Math.round(downloadTimeSeconds / 60)} ${
                                strings["minutes"][language] || "minutes"
                              }`
                            : `${(downloadTimeSeconds / 3600).toFixed(1)} ${
                                strings["hours"][language] || "hours"
                              }`;
                        return (
                          <div
                            key={index}
                            style={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                              padding: "1em 0",
                              borderBottom:
                                index < 4 ? "1px solid #f1f3f4" : "none",
                            }}
                          >
                            <div>
                              <Text
                                size="lg"
                                style={{
                                  color: isDarkMode() ? "#fff" : "#333",
                                  fontWeight: 500,
                                }}
                              >
                                {file.name}
                              </Text>
                            </div>
                            <Text
                              size="lg"
                              fw={600}
                              style={{ color: isDarkMode() ? "#ccc" : "#333" }}
                            >
                              {down > 0
                                ? displayTime
                                : strings["test.your.speed.first"][language] ||
                                  "Test your speed first"}
                            </Text>
                          </div>
                        );
                      })}
                    </Stack>
                  </Card>
                </Grid.Col>{" "}
                <Grid.Col span={{ base: 12, md: 6 }}>
                  <Card
                    style={{
                      backgroundColor: isDarkMode() ? "#5f383dff" : "white",
                      border: isDarkMode()
                        ? "1px solid #421017ff"
                        : "1px solid #e9ecef",
                      boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                      height: "100%",
                    }}
                    radius="lg"
                    p="xl"
                  >
                    <Title
                      order={3}
                      style={{
                        color: isDarkMode() ? "#fff" : "#333",
                        marginBottom: "1.5em",
                        textAlign: "center",
                        fontWeight: 600,
                      }}
                    >
                      <FaGun
                        size="1.2em"
                        style={{
                          marginRight: "0.5em",
                          verticalAlign: "middle",
                        }}
                      />
                      {strings["online.gaming"][language] || "Online Gaming"}
                    </Title>
                    <Text
                      style={{
                        textAlign: "center",
                        color: isDarkMode() ? "#adb5bd" : "#ad7d7dff",
                        fontSize: "0.9rem",
                        marginBottom: "1em",
                      }}
                    >
                      {strings["gaming.ping.explanation"][language] ||
                        "Lower ping means less delay in your inputs being registered in-game"}
                    </Text>
                    <Stack gap="lg">
                      {[
                        {
                          game:
                            strings["competitive.fps"][language] ||
                            "Competitive FPS",
                          requirement: 20,
                          description:
                            strings["competitive.fps.desc"][language] ||
                            "CS2, Valorant, Apex",
                        },
                        {
                          game: strings["moba.games"][language] || "MOBA Games",
                          requirement: 30,
                          description:
                            strings["moba.games.desc"][language] ||
                            "League of Legends, Dota 2",
                        },
                        {
                          game:
                            strings["casual.gaming"][language] ||
                            "Casual Gaming",
                          requirement: 50,
                          description:
                            strings["casual.gaming.desc"][language] ||
                            "Minecraft, Among Us",
                        },
                        {
                          game: strings["mmo.games"][language] || "MMO Games",
                          requirement: 100,
                          description:
                            strings["mmo.games.desc"][language] ||
                            "WoW, Final Fantasy XIV",
                        },
                      ].map((gameType, index) => {
                        const canPlay =
                          ping <= gameType.requirement && ping > 0;
                        const statusColor = canPlay
                          ? "#28a745"
                          : ping > gameType.requirement
                          ? "#f59e0b"
                          : "#666";
                        return (
                          <div
                            key={index}
                            style={{
                              display: "flex",
                              justifyContent: "space-between",
                              alignItems: "center",
                              padding: "1em 0",
                              borderBottom:
                                index < 4 ? "1px solid #f1f3f4" : "none",
                            }}
                          >
                            <div>
                              <Text
                                size="lg"
                                style={{
                                  color: isDarkMode() ? "#fff" : "#333",
                                  fontWeight: 500,
                                }}
                              >
                                {gameType.game}
                              </Text>
                              <Text size="sm" style={{ color: "#ad7d7dff" }}>
                                {gameType.description}
                              </Text>
                            </div>
                            <div style={{ textAlign: "right" }}>
                              <Text
                                size="lg"
                                fw={600}
                                style={{ color: statusColor }}
                              >
                                {ping === 0
                                  ? strings["test.ping.first"][language] ||
                                    "Test ping first"
                                  : canPlay
                                  ? strings["excellent"][language] ||
                                    "✓ Excellent"
                                  : strings["high.latency"][language] ||
                                    "⚠ High latency"}
                              </Text>
                              <Text size="sm" style={{ color: "#ad7d7dff" }}>
                                {strings["target"][language] || "Target"}: &lt;
                                {gameType.requirement}ms
                              </Text>
                            </div>
                          </div>
                        );
                      })}
                    </Stack>
                  </Card>
                </Grid.Col>
              </Grid>
            </Stack>
          </Card>
        </Card>{" "}
        {/* Debug Menu */}
        <Card
          style={{
            position: "fixed",
            top: "50%",
            left: "20%",
            transform: "translate(-50%, -50%)",
            width: "400px",
            maxHeight: "80vh",
            overflowY: "auto",
            display: showDebug ? "block" : "none",
            backgroundColor: "white",
            border: "2px solid #007bff",
            boxShadow: "0 8px 32px rgba(0, 123, 255, 0.3)",
            zIndex: 2000,
          }}
          radius="lg"
        >
          <div
            style={{
              position: "absolute",
              top: "10px",
              right: "10px",
              cursor: "pointer",
              backgroundColor: "#f8f9fa",
              color: "#666",
              borderRadius: "50%",
              width: "30px",
              height: "30px",
              display: "flex",
              alignItems: "center",
              justifyContent: "center",
              fontSize: "1em",
              transition: "all 0.2s ease",
              border: "1px solid #e9ecef",
            }}
            onClick={() => setShowDebug(false)}
            onMouseEnter={(e) => {
              e.currentTarget.style.backgroundColor = "#e9ecef";
            }}
            onMouseLeave={(e) => {
              e.currentTarget.style.backgroundColor = "#f8f9fa";
            }}
          >
            <RxCross2 />
          </div>{" "}
          <Stack style={{ padding: "2em" }}>
            <Title
              order={2}
              style={{
                textAlign: "center",
                color: "#007bff",
                marginBottom: "1em",
              }}
            >
              {strings["debug.menu"][language] || "🐛 Debug Menu"}
            </Title>
            <Text
              style={{
                textAlign: "center",
                color: "#666",
                fontSize: "0.9rem",
                marginBottom: "1.5em",
              }}
            >
              {strings["manually.set.values"][language] ||
                "Manually set speed test values (Cmd+G to toggle)"}
            </Text>{" "}
            <Stack gap="md">
              <div>
                <Text size="sm" fw={500} style={{ marginBottom: "0.5em" }}>
                  {strings["download.speed.bps"][language] ||
                    "Download Speed (bps)"}
                </Text>
                <Input
                  type="number"
                  placeholder={
                    strings["download.placeholder"][language] ||
                    "e.g., 100000000 (100 Mbps)"
                  }
                  value={down || ""}
                  onChange={(e) => {
                    const value = parseFloat(e.target.value) || 0;
                    setDown(value);
                    setSpeed(Math.round((value / 1000000) * 1000) / 1000);
                  }}
                />
              </div>{" "}
              <div>
                <Text size="sm" fw={500} style={{ marginBottom: "0.5em" }}>
                  {strings["upload.speed.bps"][language] ||
                    "Upload Speed (bps)"}
                </Text>
                <Input
                  type="number"
                  placeholder={
                    strings["upload.placeholder"][language] ||
                    "e.g., 50000000 (50 Mbps)"
                  }
                  value={up || ""}
                  onChange={(e) => setUp(parseFloat(e.target.value) || 0)}
                />
              </div>{" "}
              <div>
                <Text size="sm" fw={500} style={{ marginBottom: "0.5em" }}>
                  {strings["ping.ms"][language] || "Ping (ms)"}
                </Text>
                <Input
                  type="number"
                  placeholder={
                    strings["ping.placeholder"][language] || "e.g., 15"
                  }
                  value={ping || ""}
                  onChange={(e) => setPing(parseFloat(e.target.value) || 0)}
                />
              </div>{" "}
              <div>
                <Text size="sm" fw={500} style={{ marginBottom: "0.5em" }}>
                  {strings["jitter.ms"][language] || "Jitter (ms)"}
                </Text>
                <Input
                  type="number"
                  placeholder={
                    strings["jitter.placeholder"][language] || "e.g., 2"
                  }
                  value={jitter || ""}
                  onChange={(e) => setJitter(parseFloat(e.target.value) || 0)}
                />
              </div>{" "}
              <Button
                variant={isTesting ? "filled" : "outline"}
                color={isTesting ? "red" : "blue"}
                onClick={() => setIsTesting(!isTesting)}
                style={{ marginTop: "1em" }}
              >
                {isTesting
                  ? strings["stop.testing.animation"][language] ||
                    "Stop Testing Animation"
                  : strings["start.testing.animation"][language] ||
                    "Start Testing Animation"}
              </Button>{" "}
              <Button
                variant="light"
                color="gray"
                onClick={() => {
                  setDown(0);
                  setUp(0);
                  setPing(0);
                  setJitter(0);
                  setSpeed(0);
                  setIsTesting(false);
                }}
                style={{ marginTop: "0.5em" }}
              >
                {strings["reset.all.values"][language] || "Reset All Values"}
              </Button>
            </Stack>
          </Stack>
        </Card>{" "}
        {/* Info Button and Card */}
        <FaInfoCircle
          style={{
            position: "fixed",
            bottom: isRunningInCapacitor() ? "30px" : "15px",
            right: isRunningInCapacitor() ? "30px" : "15px",
            opacity: 0.4,
            cursor: "pointer",
          }}
          onClick={() => setShowInfo(true)}
          onMouseEnter={(e) => {
            e.currentTarget.style.opacity = "0.7";
          }}
          onMouseLeave={(e) => {
            e.currentTarget.style.opacity = "0.4";
          }}
          size="2em"
        />{" "}
        <Card
          style={{
            position: "absolute",
            top: "5%",
            left: "5%",
            width: "90vw",
            height: "90vh",
            overflowY: "auto",
            display: showInfo ? "block" : "none",
            backgroundColor: isDarkMode() ? "#403437ff" : "#f8f9fa",
            border: isDarkMode() ? "1px solid #421017ff" : "1px solid #e9ecef",
            boxShadow: "0 4px 20px rgba(0, 0, 0, 0.1)",
          }}
          radius="lg"
        >
          <Card
            style={{
              width: "100%",
              height: "100%",
              position: "relative",
              background: "transparent",
              border: "none",
              boxShadow: "none",
              overflowY: "auto",
            }}
          >
            <div
              style={{
                position: "fixed",
                top: "6.5%",
                left: "6.5%",
                cursor: "pointer",
                backgroundColor: isDarkMode() ? "#403437ff" : "#f8f9fa",
                color: isDarkMode() ? "#adb5bd" : "#666",
                borderRadius: "50%",
                width: "40px",
                height: "40px",
                display: "flex",
                alignItems: "center",
                justifyContent: "center",
                fontSize: "1.2em",
                transition: "all 0.2s ease",
                border: isDarkMode()
                  ? "1px solid #421017ff"
                  : "1px solid #e9ecef",
                zIndex: 1000,
              }}
              onClick={() => setShowInfo(false)}
              onMouseEnter={(e) => {
                e.currentTarget.style.backgroundColor = isDarkMode()
                  ? "#5f383dff"
                  : "#e9ecef";
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.backgroundColor = isDarkMode()
                  ? "#40292cff"
                  : "#f8f9fa";
              }}
            >
              <RxCross2 />
            </div>
            <Stack style={{ padding: isSmolPhone() ? "0em" : "2em" }} gap="0">
              <Title
                order={1}
                style={{
                  textAlign: "center",
                  fontSize: "2.5rem",
                  fontWeight: 800,
                  color: isDarkMode() ? "#fff" : "#333",
                }}
              >
                QwkSpd
              </Title>
              <Text
                style={{
                  textAlign: "center",
                  color: isDarkMode() ? "#adb5bd" : "#666",
                  fontSize: "1.1rem",
                  marginBottom: "2em",
                }}
              >
                {strings["by"][language] || "By"}{" "}
                <a href="https://benjs.uk">BenJS</a>
              </Text>{" "}
              <Grid gutter="xl">
                <Grid.Col span={{ base: 12, md: 6 }}>
                  <Card
                    style={{
                      backgroundColor: isDarkMode() ? "#5f383dff" : "white",
                      border: isDarkMode()
                        ? "1px solid #421017ff"
                        : "1px solid #e9ecef",
                      boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                      height: "100%",
                    }}
                    radius="lg"
                    p="xl"
                  >
                    <Title
                      order={3}
                      style={{
                        color: isDarkMode() ? "#fff" : "#333",
                        marginBottom: "1.5em",
                        textAlign: "center",
                        fontWeight: 600,
                      }}
                    >
                      {strings["about.this.project"][language] ||
                        "About This Project"}
                    </Title>
                    <Stack gap="lg">
                      <Text
                        style={{
                          color: isDarkMode() ? "#adb5bd" : "#666",
                          fontSize: "1rem",
                          lineHeight: 1.6,
                        }}
                      >
                        {strings["project.description"][language] ||
                          "QwkSpd is my attempt at a speedtest that's fast, accurate to everyday use, and provides information you can actually use."}
                      </Text>
                      <Text
                        style={{
                          color: isDarkMode() ? "#adb5bd" : "#666",
                          fontSize: "1rem",
                          lineHeight: 1.6,
                        }}
                      >
                        {strings["contact.info"][language] ||
                          "If you have any issues feel free to contact me on Slack at @Barxilly or email me at"}{" "}
                        <a
                          href="mailto:qwkspd@benjs.uk?subject=QwkSpd%20Support%20-%20Issue%20Report"
                          style={{ color: "#007bff" }}
                        >
                          qwkspd@benjs.uk
                        </a>
                        .
                      </Text>
                    </Stack>
                  </Card>
                </Grid.Col>{" "}
                <Grid.Col span={{ base: 12, md: 6 }}>
                  <Card
                    style={{
                      backgroundColor: isDarkMode() ? "#5f383dff" : "white",
                      border: isDarkMode()
                        ? "1px solid #421017ff"
                        : "1px solid #e9ecef",
                      boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                      height: "100%",
                    }}
                    radius="lg"
                    p="xl"
                  >
                    <Title
                      order={3}
                      style={{
                        color: isDarkMode() ? "#fff" : "#333",
                        marginBottom: "1.5em",
                        textAlign: "center",
                        fontWeight: 600,
                      }}
                    >
                      {strings["credits.acknowledgments"][language] ||
                        "Credits & Acknowledgments"}
                    </Title>
                    <Stack gap="lg">
                      <div>
                        <Text
                          style={{
                            color: isDarkMode() ? "#fff" : "#333",
                            fontWeight: 600,
                            marginBottom: "0.5em",
                          }}
                        >
                          {strings["powered.by.cloudflare"][language] ||
                            "Powered by Cloudflare"}
                        </Text>
                        <Text
                          style={{
                            color: isDarkMode() ? "#adb5bd" : "#666",
                            fontSize: "0.9rem",
                            lineHeight: 1.6,
                          }}
                        >
                          {strings["cloudflare.description"][language] ||
                            "Speed testing infrastructure provided by Cloudflare's global network, ensuring accurate and reliable measurements from servers closest to you."}
                        </Text>
                      </div>{" "}
                      <div>
                        <Text
                          style={{
                            color: isDarkMode() ? "#fff" : "#333",
                            fontWeight: 600,
                            marginBottom: "0.5em",
                          }}
                        >
                          Built With
                        </Text>
                        <Text
                          style={{
                            color: isDarkMode() ? "#adb5bd" : "#666",
                            fontSize: "0.9rem",
                            lineHeight: 1.6,
                          }}
                        >
                          • React + Vite
                          <br />
                          • Mantine
                          <br />• Cloudflare Speed Test API
                        </Text>
                      </div>
                      <div>
                        <Text
                          style={{
                            color: isDarkMode() ? "#fff" : "#333",
                            fontWeight: 600,
                            marginBottom: "0.5em",
                          }}
                        >
                          {strings["open.source"][language] || "Open Source"}
                        </Text>
                        <Text
                          style={{
                            color: isDarkMode() ? "#adb5bd" : "#666",
                            fontSize: "0.9rem",
                            lineHeight: 1.6,
                          }}
                        >
                          {strings["open.source.description"][language] ||
                            "This project is open source, and made using other open"}
                          {strings["source.libraries.tech"][language] ||
                            "source libraries and technologies."}
                        </Text>
                      </div>
                    </Stack>
                  </Card>
                </Grid.Col>{" "}
                <Grid.Col span={12}>
                  <Card
                    style={{
                      backgroundColor: isDarkMode() ? "#4d2c37ff" : "#f8f9fa",
                      border: isDarkMode()
                        ? "1px solid #421017ff"
                        : "1px solid #e9ecef",
                      boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                    }}
                    radius="lg"
                    p="lg"
                  >
                    <Center mb="md">
                      <a
                        href="https://ko-fi.com/sillysbs"
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        <Image
                          src="https://storage.ko-fi.com/cdn/brandasset/v2/support_me_on_kofi_dark.png"
                          w="10em"
                          alt="Support me on Ko-fi"
                        />
                      </a>
                    </Center>
                    <Center>
                      <Text
                        style={{
                          textAlign: "center",
                          color: isDarkMode() ? "#fff" : "#333",
                          fontSize: "0.9rem",
                          display: "inline-block",
                        }}
                      >
                        QwkSpd •{" "}
                        {strings["made.with.love"][language] || "Made with"}{" "}
                        <BsFillHeartFill
                          style={{
                            color: isDarkMode() ? "#f55" : "#d00",
                            verticalAlign: "middle",
                          }}
                        />{" "}
                        +{" "}
                        <BiSolidCoffeeTogo
                          style={{
                            color: isDarkMode() ? "#f55" : "#d00",
                            verticalAlign: "middle",
                          }}
                        />{" "}
                        {strings["by.benjs"][language] || "by BenJS"} •{" "}
                        {strings["version"][language] || "Version"} 1.0.5
                      </Text>
                    </Center>
                    <Text
                      style={{
                        textAlign: "center",
                        color: isDarkMode() ? "#adb5bd" : "#666",
                        fontSize: "0.8rem",
                        marginTop: "0.5em",
                      }}
                    >
                      {strings["built.in.2025"][language] || "Built in 2025"} •{" "}
                      <a href="https://github.com/barxilly/BenJSSpeedTest">
                        {strings["open.source"][language] || "Open Source"}
                      </a>
                    </Text>
                    <Center style={{ marginTop: "1em" }}>
                      <Menu shadow="md" width={200}>
                        <Menu.Target>
                          <Button
                            variant="subtle"
                            size="sm"
                            style={{
                              background: "transparent",
                              border: "none",
                              color: isDarkMode() ? "#adb5bd" : "#666",
                              fontSize: "0.8rem",
                              padding: "0.25em 0.5em",
                            }}
                          >
                            {language === "eng"
                              ? "🇬🇧 ENG"
                              : language === "hi"
                              ? "🇮🇳 हिं"
                              : "🇳🇱 NL"}
                          </Button>
                        </Menu.Target>
                        <Menu.Dropdown>
                          <Menu.Item
                            onClick={() => handleLanguageChange("eng")}
                            style={{
                              backgroundColor:
                                language === "eng"
                                  ? isDarkMode()
                                    ? "#40292cff"
                                    : "#f8f9fa"
                                  : "transparent",
                            }}
                          >
                            🇬🇧 English
                          </Menu.Item>
                          <Menu.Item
                            onClick={() => handleLanguageChange("hi")}
                            style={{
                              backgroundColor:
                                language === "hi"
                                  ? isDarkMode()
                                    ? "#40292cff"
                                    : "#f8f9fa"
                                  : "transparent",
                            }}
                          >
                            🇮🇳 हिंदी
                          </Menu.Item>
                          <Menu.Item
                            onClick={() => handleLanguageChange("nl")}
                            style={{
                              backgroundColor:
                                language === "nl"
                                  ? isDarkMode()
                                    ? "#40292cff"
                                    : "#f8f9fa"
                                  : "transparent",
                            }}
                          >
                            🇳🇱 Nederlands
                          </Menu.Item>
                        </Menu.Dropdown>
                      </Menu>
                    </Center>
                  </Card>
                </Grid.Col>
              </Grid>
            </Stack>
          </Card>
        </Card>
        {/* App Button and Card */}
        {!isRunningInCapacitor() && navigator.userAgent?.includes("Android") ? (
          <>
            <MdInstallMobile
              style={{
                position: "fixed",
                bottom: isRunningInCapacitor() ? "30px" : "15px",
                left: isRunningInCapacitor() ? "30px" : "15px",
                opacity: 0.4,
                cursor: "pointer",
              }}
              onClick={() => setShowAppUpsell(true)}
              onMouseEnter={(e) => {
                e.currentTarget.style.opacity = "0.7";
              }}
              onMouseLeave={(e) => {
                e.currentTarget.style.opacity = "0.4";
              }}
              size="2em"
            />{" "}
            <Card
              style={{
                position: "absolute",
                top: "5%",
                left: "5%",
                width: "90vw",
                height: "80vh",
                overflowY: "auto",
                display: showAppUpsell ? "block" : "none",
                backgroundColor: isDarkMode() ? "#403437ff" : "#f8f9fa",
                border: isDarkMode()
                  ? "1px solid #421017ff"
                  : "1px solid #e9ecef",
                boxShadow: "0 4px 20px rgba(0, 0, 0, 0.1)",
              }}
              radius="lg"
            >
              <Card
                style={{
                  width: "100%",
                  height: "100%",
                  position: "relative",
                  background: "transparent",
                  border: "none",
                  boxShadow: "none",
                  overflowY: "auto",
                }}
              >
                <div
                  style={{
                    position: "fixed",
                    top: "6.5%",
                    left: "6.5%",
                    cursor: "pointer",
                    backgroundColor: isDarkMode() ? "#403437ff" : "#f8f9fa",
                    color: isDarkMode() ? "#adb5bd" : "#666",
                    borderRadius: "50%",
                    width: "40px",
                    height: "40px",
                    display: "flex",
                    alignItems: "center",
                    justifyContent: "center",
                    fontSize: "1.2em",
                    transition: "all 0.2s ease",
                    border: isDarkMode()
                      ? "1px solid #421017ff"
                      : "1px solid #e9ecef",
                    zIndex: 1000,
                  }}
                  onClick={() => setShowAppUpsell(false)}
                  onMouseEnter={(e) => {
                    e.currentTarget.style.backgroundColor = isDarkMode()
                      ? "#5f383dff"
                      : "#e9ecef";
                  }}
                  onMouseLeave={(e) => {
                    e.currentTarget.style.backgroundColor = isDarkMode()
                      ? "#40292cff"
                      : "#f8f9fa";
                  }}
                >
                  <RxCross2 />
                </div>
                <Stack
                  style={{ padding: isSmolPhone() ? "0em" : "2em" }}
                  gap="0"
                >
                  <Title
                    order={1}
                    style={{
                      textAlign: "center",
                      fontSize: "2.5rem",
                      fontWeight: 800,
                      color: isDarkMode() ? "#fff" : "#333",
                    }}
                  >
                    {strings["install"][language] || "Install"}
                  </Title>
                  <Text
                    style={{
                      textAlign: "center",
                      color: isDarkMode() ? "#adb5bd" : "#666",
                      fontSize: "1.1rem",
                      marginTop: "1em",
                    }}
                  >
                    {strings["join.google.play.beta"][language] ||
                      "Join Google Play beta:"}
                  </Text>
                  <ol style={{ marginBottom: "1em" }}>
                    <li>
                      &nbsp;{strings["join.the"][language] || "Join the"}{" "}
                      <a
                        href="https://groups.google.com/g/qwkspd-testers"
                        style={{ textDecoration: "underline" }}
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        <GrGroup />{" "}
                        {strings["join.google.groups"][language] ||
                          "Join the Google Groups"}
                      </a>
                    </li>
                    <li>
                      &nbsp;
                      <a
                        href="https://play.google.com/apps/testing/uk.benjs.speed"
                        style={{ textDecoration: "underline" }}
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        <GrUpdate size="0.75em" />{" "}
                        {strings["become.a.tester"][language] ||
                          "Become A Tester"}
                      </a>
                    </li>
                  </ol>
                  <Text
                    style={{
                      textAlign: "center",
                      color: isDarkMode() ? "#adb5bd" : "#666",
                      fontSize: "1.1rem",
                      marginBottom: "1em",
                    }}
                  >
                    {canInstallPWA
                      ? strings["install.as.pwa"][language] ||
                        "Install as PWA or download APK:"
                      : strings["only.android"][language] ||
                        "Only available on Android for now."}
                  </Text>
                  {canInstallPWA && (
                    <Center style={{ marginBottom: "1em" }}>
                      <Image
                        src="https://user-images.githubusercontent.com/3104648/28971167-ef90a94c-7922-11e7-998a-8f38b4e61cea.png"
                        w="10em"
                        alt="Install PWA Icon"
                        onClick={handlePWAInstall}
                      />
                    </Center>
                  )}
                  <Center>
                    <a
                      href="https://github.com/barxilly/BenJSSpeedTest/releases/download/v1.0.5/qwkspd-1.0.5.apk"
                      target="_blank"
                      rel="noopener noreferrer"
                      style={{
                        textDecoration: "none",
                        marginBottom: "1em",
                        marginTop: "1em",
                      }}
                    >
                      <Image
                        src="https://www.one-line.com/sites/g/files/lnzjqr776/files/styles/crop_freeform/public/APK-Badge.png?itok=K836bPDk"
                        w="10em"
                        alt="Download QwkSpd APK"
                      />
                    </a>
                  </Center>
                  <Space h="md" />
                  <Card
                    style={{
                      backgroundColor: isDarkMode() ? "#4d2c37ff" : "#f8f9fa",
                      border: isDarkMode()
                        ? "1px solid #421017ff"
                        : "1px solid #e9ecef",
                      boxShadow: "0 1px 3px rgba(0,0,0,0.1)",
                    }}
                    radius="lg"
                    p="lg"
                  >
                    <Center>
                      <Text
                        style={{
                          textAlign: "center",
                          fontSize: "0.9rem",
                          color: isDarkMode() ? "#adb5bd" : "#666",
                        }}
                      >
                        {strings["support.app.development"][language] ||
                          "Support the app's development by buying me a coffee!"}
                      </Text>
                    </Center>
                    <Space h="md" />
                    <Center mb="sm">
                      <a
                        href="https://ko-fi.com/sillysbs"
                        target="_blank"
                        rel="noopener noreferrer"
                      >
                        <Image
                          src="https://storage.ko-fi.com/cdn/brandasset/v2/support_me_on_kofi_dark.png"
                          w="12em"
                          alt="Support me on Ko-fi"
                        />
                      </a>
                    </Center>
                  </Card>
                </Stack>
              </Card>
            </Card>
          </>
        ) : (
          <></>
        )}
      </MantineProvider>
    </div>
  );
}
export default App;
